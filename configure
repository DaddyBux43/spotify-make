#!/bin/bash
#
# Configure spotify setup
#


function on_prefix_change()
{
    bindir=$prefix/bin
    libdir=$prefix/lib
    datadir=$prefix/share
    mandir=$datadir/man
}

prefix=/usr/local
on_prefix_change

function usage()
{
cat << EOF
Usage: configure [options]

--prefix=path  Set common prefix, defaults to $prefix.
--datadir=path Directory for non-arch data, defaults to $datadir.
--libdir=path  Directory for arch data, defaults to $libdir.
--bindir=path  Directory for binary, defaults to $bindir.
--mandir=path  Directory for manual pages, defaults to $mandir.
--user         Configure for personal install, nust be first option.
--local        Don't download anything from spotify repo. Requires
               version= and file= environment variables.

Variables:
   version:    Spotify version, by default parsed from repo.
   file:       Complete spotify .deb filename, by default parsed
               from repo.
EOF
exit 0
}


while [ "$1" != "" ]; do
    case $1 in
        --datadir=*)
            datadir=${1##*=}
            ;;
        --prefix=*)
            prefix=${1##*=}
            on_prefix_change
            ;;
        --libdir=*)
            libdir=${1##*=}
            ;;
        --mandir=*)
            mandir=${1##*=}
            ;;
        --bindir=*)
            bindir=${1##*=}
            ;;
        --user)
            prefix=$HOME/.local
            on_prefix_change
            bindir=$HOME/bin
	    ;;
        --local)
	    local_=1
            ;;
        *) usage
	    ;;
    esac
    shift
done

echo "Checking build and support dependencies"
echo -n "    python: "
sts="$(python --version 2>&1) (ok)" || sts="ERROR: Not found"
echo $sts

if [  -z "$local_" ]; then
    echo -n "    wget: "
    sts="$(wget --version | head -1) (ok)" || sts="ERROR: Not found"
    echo $sts
fi

echo -n "    zenity: "
sts="$(zenity --version 2>/dev/null) (ok)" || \
    sts="WARNING: Not found (make will run, but not spotify)"
echo $sts

echo -n "    ldconfig: "
sts="$(ldconfig --version 2>/dev/null| head -1) (ok)" \
    || sts="ERROR: Not found"
echo $sts

echo -n "    ar: "
sts="$(ar --version | head -1| sed 's/$/ (ok)/' || echo 'ERROR: Not found')"
echo $sts


echo -n "    lsb_release: "
sts="trying -i: $(lsb_release -i ) (ok)" || sts="ERROR: Not found"
echo $sts

echo -n "    make: "
sts="$(make --version 2>/dev/null| head -1) (ok)" \
    || sts="ERROR: Not found"
[[ $sts = *GNU* ]] || sts="ERROR: make is not GNU make."
echo $sts

echo -n "    install: "
sts="$(install --version | head -1) (ok)" && {
    install -pD configure foo/bar
    [[ -d foo && -f foo/bar ]] && rm -rf foo \
        || sts="ERROR: install -pD doesn't work as expected."
    rm -rf foo
} || sts= "ERROR: not found"
echo $sts

echo -n "    desktop-file-validate: "
sts="$(desktop-file-validate -h &>/dev/null) (ok)" \
    || sts="WARNING: Not found (make will run, but less than perfect)"
echo $sts

echo -n "    gtk-update-icon-cache: "
sts="$(gtk-update-icon-cache -h &>/dev/null) (ok)" \
    || sts="WARNING: Not found (make will run, but less than perfect)"
echo $sts

echo -n "Determining distro:... "
dist=$(lsb_release -i || echo "Unknown")
dist=${dist##*:}
dist=$( echo $dist )
echo $dist

if [ -z "$local_" ]; then
    echo -n "Determining version:... "
    wget -qO spotify.dir http://repository.spotify.com/pool/non-free/s/spotify
    version=$(grep 'spotify-client_.*amd64.deb' spotify.dir \
                  | sed 's/.*spotify-client_\([^-]*\).*/\1/')
elif [ -z "$version" ]; then
    echo "ERROR: --local flag set but no version supplied, giving up"
    exit 1
else
    echo -n "Using supplied version:..."
fi
echo $version

echo -n "Determining base version:... "
base_version=$( echo $version | sed 's/\([0-9][.][0-9][.][0-9]\).*/\1/' )
echo $base_version

echo -n "Determining arch:... "
if [ $(uname -i) = 'x86_64' ]; then
    arch="amd64"
else
    arch="i386"
fi
echo $arch

if [ -z "$local_" ]; then
    echo -n "Determine .deb file..."
    file=$(grep "spotify-client.*$arch.deb" spotify.dir \
                | sed 's/.*\(spotify-client.*deb\).*/\1/')
elif [ -z "$file" ]; then
    echo "ERROR: --local flag set but no file supplied, giving up"
    exit 1
else
    echo -n "Using supplied file:..."
fi
echo $file

echo -n "Determine permissions for shared libs (SO_PERMS)..."
if [[ "$dist" = *Fedora*  ||  "$dist" == *SUSE* ]]; then
    so_perms=755
else
    so_perms=644
fi
echo $so_perms

rm -f spotify.dir

echo "Configuration paths:"
echo "    prefix:  $prefix"
echo "    bindir:  $bindir"
echo "    libdir:  $libdir"
echo "    datadir: $datadir"
echo "    mandir:  $mandir"

echo "Writing Makefile"
sed -e  "s|@prefix@|$prefix|" \
    -e  "s|@bindir@|$bindir|" \
    -e  "s|@libdir@|$libdir|" \
    -e  "s|@mandir@|$mandir|" \
    -e  "s|@datadir@|$datadir|" \
    -e  "s|@version@|$version|" \
    -e  "s|@base_version@|$base_version|" \
    -e  "s|@arch@|$arch|" \
    -e  "s|@dist@|$dist|" \
    -e  "s|@archive@|$file|" \
    -e  "s|@so_perms@|$so_perms|" \
< Makefile.in > Makefile
